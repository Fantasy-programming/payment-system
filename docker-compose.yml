services:
  mongo:
    image: mongo:latest
    container_name: mongo_ups
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ridy
      MONGO_INITDB_ROOT_PASSWORD: tuestfou
    volumes:
      - mongo_data:/data/db
    networks:
      - ups_network

  redis:
    image: redis:alpine
    container_name: redis_ups
    restart: always
    networks:
      - ups_network

  prometheus:
    image: prom/prometheus:v2.54.1
    container_name: prometheus_ups
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - ups_network

  grafana:
    image: grafana/grafana:11.2.0
    container_name: grafana_ups
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - ups_network

  loki:
    image: grafana/loki:latest
    container_name: loki_ups
    volumes:
      - ./loki/loki-config.yaml:/mnt/config/loki-config.yaml:ro
    networks:
      - ups_network

  ups:
    build:
      context: .
      dockerfile: ./backend/Dockerfile
    container_name: "ups"
    depends_on:
      - mongo
      - redis
      - loki
    env_file:
      - ./.env
    volumes:
      - ./backend:/usr/src/app
    expose:
      - "3000"
    networks:
      - ups_network

  nginx:
    build:
      context: .
      dockerfile: ./nginx/Dockerfile
    container_name: "ups_nginx"
    ports:
      - "80:80"
    depends_on:
      - ups
    networks:
      - ups_network

volumes:
  mongo_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  ups_network:
    driver: bridge
