diff --git a/lib/winston/create-logger.js b/lib/winston/create-logger.js
index e868aeaad6fb47f1a5ff17c8268bf719bf4d5499..e14f1da0a9bf81604fd7af0293580351ecd13e3e 100644
--- a/lib/winston/create-logger.js
+++ b/lib/winston/create-logger.js
@@ -5,15 +5,15 @@
  * MIT LICENCE
  */
 
-'use strict';
+"use strict";
 
-const { LEVEL } = require('triple-beam');
-const config = require('./config');
-const Logger = require('./logger');
-const debug = require('@dabh/diagnostics')('winston:create-logger');
+const { LEVEL } = require("triple-beam");
+const config = require("./config");
+const Logger = require("./logger");
+const debug = require("@dabh/diagnostics")("winston:create-logger");
 
 function isLevelEnabledFunctionName(level) {
-  return 'is' + level.charAt(0).toUpperCase() + level.slice(1) + 'Enabled';
+  return "is" + level.charAt(0).toUpperCase() + level.slice(1) + "Enabled";
 }
 
 /**
@@ -52,9 +52,11 @@ module.exports = function (opts = {}) {
   //
   Object.keys(opts.levels).forEach(function (level) {
     debug('Define prototype method for "%s"', level);
-    if (level === 'log') {
+    if (level === "log") {
       // eslint-disable-next-line no-console
-      console.warn('Level "log" not defined: conflicts with the method "log". Use a different level name.');
+      console.warn(
+        'Level "log" not defined: conflicts with the method "log". Use a different level name.',
+      );
       return;
     }
 
@@ -75,16 +77,18 @@ module.exports = function (opts = {}) {
       // Optimize the hot-path which is the single object.
       if (args.length === 1) {
         const [msg] = args;
-        const info = msg && msg.message && msg || { message: msg };
+        const info = (msg &&
+          msg.message &&
+          JSON.parse(JSON.stringify(msg))) || { message: msg };
         info.level = info[LEVEL] = level;
         self._addDefaultMeta(info);
         self.write(info);
-        return (this || logger);
+        return this || logger;
       }
 
       // When provided nothing assume the empty string
       if (args.length === 0) {
-        self.log(level, '');
+        self.log(level, "");
         return self;
       }
 
