diff --git a/dist/index.d.ts b/dist/index.d.ts
index aef35582484a87646ba1c88d06baad25021b202c..352bf9e83e6bff76d58d8418221e8f5eb8679cbf 100644
--- a/dist/index.d.ts
+++ b/dist/index.d.ts
@@ -1,33 +1,66 @@
-import pino from "pino";
-import { Elysia } from "elysia";
-import type { ElysiaLogger, StandaloneLoggerOptions, ElysiaFileLoggerOptions, ElysiaStreamLoggerOptions, _INTERNAL_Writeonly, _INTERNAL_ElysiaLoggerPlugin, _INTERNAL_ElysiaLoggerPluginAutoLoggingState, _INTERNAL_ElysiaLoggerPluginAutoLoggingEnabledOptions, _INTERNAL_ElysiaLoggerPluginAutoLoggingDisabledOptions } from "./types";
-export declare function logger(options?: _INTERNAL_ElysiaLoggerPluginAutoLoggingEnabledOptions<ElysiaStreamLoggerOptions>): _INTERNAL_ElysiaLoggerPlugin<_INTERNAL_ElysiaLoggerPluginAutoLoggingState>;
-export declare function logger(options?: _INTERNAL_ElysiaLoggerPluginAutoLoggingDisabledOptions<ElysiaStreamLoggerOptions>): _INTERNAL_ElysiaLoggerPlugin;
-export declare function fileLogger(options: _INTERNAL_ElysiaLoggerPluginAutoLoggingEnabledOptions<ElysiaFileLoggerOptions>): _INTERNAL_ElysiaLoggerPlugin<_INTERNAL_ElysiaLoggerPluginAutoLoggingState>;
-export declare function fileLogger(options: _INTERNAL_ElysiaLoggerPluginAutoLoggingDisabledOptions<ElysiaFileLoggerOptions>): _INTERNAL_ElysiaLoggerPlugin;
-export declare function createPinoLogger(options?: StandaloneLoggerOptions): ElysiaLogger<Elysia<"", false, {
-    decorator: {};
-    store: {};
-    derive: {};
-    resolve: {
-        readonly log: pino.Logger<never>;
-    };
-}, {
-    type: {};
-    error: {};
-}, {
-    schema: {};
-    macro: {};
-    macroFn: {};
-}, {}, {
-    derive: {};
-    resolve: {};
-    schema: {};
-}, {
-    derive: {};
-    resolve: {};
-    schema: {};
-}> | _INTERNAL_ElysiaLoggerPlugin<_INTERNAL_Writeonly<_INTERNAL_ElysiaLoggerPluginAutoLoggingState>>>;
-export * from "./config";
-export type { InferContext } from "./types";
-export { pino } from "pino";
+import pino, { Logger } from "pino"
+import { Elysia } from "elysia"
+import type {
+  ElysiaLogger,
+  StandaloneLoggerOptions,
+  ElysiaFileLoggerOptions,
+  ElysiaStreamLoggerOptions,
+  _INTERNAL_Writeonly,
+  _INTERNAL_ElysiaLoggerPlugin,
+  _INTERNAL_ElysiaLoggerPluginAutoLoggingState,
+  _INTERNAL_ElysiaLoggerPluginAutoLoggingEnabledOptions,
+  _INTERNAL_ElysiaLoggerPluginAutoLoggingDisabledOptions,
+} from "./types"
+export declare function logger(
+  options?: _INTERNAL_ElysiaLoggerPluginAutoLoggingEnabledOptions<ElysiaStreamLoggerOptions>,
+): _INTERNAL_ElysiaLoggerPlugin<_INTERNAL_ElysiaLoggerPluginAutoLoggingState>
+export declare function logger(
+  options?: _INTERNAL_ElysiaLoggerPluginAutoLoggingDisabledOptions<ElysiaStreamLoggerOptions>,
+): _INTERNAL_ElysiaLoggerPlugin
+export declare function fileLogger(
+  options: _INTERNAL_ElysiaLoggerPluginAutoLoggingEnabledOptions<ElysiaFileLoggerOptions>,
+): _INTERNAL_ElysiaLoggerPlugin<_INTERNAL_ElysiaLoggerPluginAutoLoggingState>
+export declare function fileLogger(
+  options: _INTERNAL_ElysiaLoggerPluginAutoLoggingDisabledOptions<ElysiaFileLoggerOptions>,
+): _INTERNAL_ElysiaLoggerPlugin
+export declare function createPinoLogger(
+  options?: StandaloneLoggerOptions,
+  logger?: Logger,
+): ElysiaLogger<
+  | Elysia<
+      "",
+      false,
+      {
+        decorator: {}
+        store: {}
+        derive: {}
+        resolve: {
+          readonly log: pino.Logger<never>
+        }
+      },
+      {
+        type: {}
+        error: {}
+      },
+      {
+        schema: {}
+        macro: {}
+        macroFn: {}
+      },
+      {},
+      {
+        derive: {}
+        resolve: {}
+        schema: {}
+      },
+      {
+        derive: {}
+        resolve: {}
+        schema: {}
+      }
+    >
+  | _INTERNAL_ElysiaLoggerPlugin<_INTERNAL_Writeonly<_INTERNAL_ElysiaLoggerPluginAutoLoggingState>>
+>
+export * from "./config"
+export type { InferContext } from "./types"
+export { pino } from "pino"
diff --git a/dist/index.js b/dist/index.js
index 231dd4356506edc6585aa5d91f9d11f800069bab..b5f5a83b2a5f33f9c086342f007301d073c5055a 100644
--- a/dist/index.js
+++ b/dist/index.js
@@ -1,84 +1,81 @@
-import pino from "pino";
-import { Elysia } from "elysia";
-import { formatters, serializers } from "./config";
+import pino from "pino"
+import { Elysia } from "elysia"
+import { formatters, serializers } from "./config"
 export function logger(options = {}) {
-    return plugin(options);
+  return plugin(options)
 }
 export function fileLogger(options) {
-    return plugin(options);
+  return plugin(options)
 }
-export function createPinoLogger(options = {}) {
-    const log = createPinoLoggerInternal(options);
-    log.into = into.bind(log);
-    return log;
+export function createPinoLogger(options = {}, logger) {
+  const log = logger ?? createPinoLoggerInternal(options)
+  log.into = into.bind(log)
+  return log
 }
 function createPinoLoggerInternal(options) {
-    options.level ??= "info";
-    options.formatters ??= formatters;
-    options.serializers ??= serializers;
-    const streamOptions = options;
-    if ("file" in options) {
-        streamOptions.stream = pino.destination(options.file);
-        delete options.file;
-    }
-    return pino(options, streamOptions.stream);
+  options.level ??= "info"
+  options.formatters ??= formatters
+  options.serializers ??= serializers
+  const streamOptions = options
+  if ("file" in options) {
+    streamOptions.stream = pino.destination(options.file)
+    delete options.file
+  }
+  return pino(options, streamOptions.stream)
 }
 function into(options = {}) {
-    const autoLogging = options.autoLogging ?? true;
-    delete options.autoLogging;
-    const getLog = (ctx) => {
-        return typeof options.customProps === "function"
-            ? this.child(options.customProps(ctx))
-            : this;
-    };
-    let app = new Elysia({
-        name: "@bogeychan/elysia-logger",
-        seed: options,
-    }).derive({ as: "global" }, (ctx) => {
-        const loggerCtx = ctx;
-        loggerCtx.isError = false;
-        return { log: getLog(loggerCtx) };
-    });
-    if (autoLogging) {
-        return app
-            .onRequest((ctx) => {
-            ctx.store = { ...ctx.store, startTime: performance.now() };
-        })
-            .onAfterResponse({ as: "global" }, (ctx) => {
-            const loggerCtx = ctx;
-            loggerCtx.isError = false;
-            const log = getLog(loggerCtx);
-            if (log.level == "silent") {
-                return;
-            }
-            if (typeof autoLogging == "object" && autoLogging.ignore(loggerCtx)) {
-                return;
-            }
-            ctx.store.startTime ??= 0;
-            ctx.store.endTime = performance.now();
-            ctx.store.responseTime = ctx.store.endTime - ctx.store.startTime;
-            log.info(ctx);
-        })
-            .onError({ as: "global" }, (ctx) => {
-            const loggerCtx = ctx;
-            loggerCtx.isError = true;
-            const log = getLog(loggerCtx);
-            if (log.level == "silent") {
-                return;
-            }
-            if (typeof autoLogging == "object" && autoLogging.ignore(loggerCtx)) {
-                return;
-            }
-            if (ctx.code === "NOT_FOUND") {
-                log.info(ctx);
-            }
-            else {
-                log.error(ctx);
-            }
-        });
-    }
-    return app;
+  const autoLogging = options.autoLogging ?? true
+  delete options.autoLogging
+  const getLog = (ctx) => {
+    return typeof options.customProps === "function" ? this.child(options.customProps(ctx)) : this
+  }
+  let app = new Elysia({
+    name: "@bogeychan/elysia-logger",
+    seed: options,
+  }).derive({ as: "global" }, (ctx) => {
+    const loggerCtx = ctx
+    loggerCtx.isError = false
+    return { log: getLog(loggerCtx) }
+  })
+  if (autoLogging) {
+    return app
+      .onRequest((ctx) => {
+        ctx.store = { ...ctx.store, startTime: performance.now() }
+      })
+      .onAfterResponse({ as: "global" }, (ctx) => {
+        const loggerCtx = ctx
+        loggerCtx.isError = false
+        const log = getLog(loggerCtx)
+        if (log.level == "silent") {
+          return
+        }
+        if (typeof autoLogging == "object" && autoLogging.ignore(loggerCtx)) {
+          return
+        }
+        ctx.store.startTime ??= 0
+        ctx.store.endTime = performance.now()
+        ctx.store.responseTime = ctx.store.endTime - ctx.store.startTime
+        log.info(ctx)
+      })
+      .onError({ as: "global" }, (ctx) => {
+        const loggerCtx = ctx
+        loggerCtx.isError = true
+        const log = getLog(loggerCtx)
+        if (log.level == "silent") {
+          return
+        }
+        if (typeof autoLogging == "object" && autoLogging.ignore(loggerCtx)) {
+          return
+        }
+        if (ctx.code === "NOT_FOUND") {
+          log.info(ctx)
+        } else {
+          log.error(ctx)
+        }
+      })
+  }
+  return app
 }
-const plugin = (options) => into.bind(createPinoLoggerInternal(options))(options);
-export * from "./config";
-export { pino } from "pino";
+const plugin = (options) => into.bind(createPinoLoggerInternal(options))(options)
+export * from "./config"
+export { pino } from "pino"
diff --git a/src/index.ts b/src/index.ts
index 2344630afb2fbbfe9daf4ee378629ea0dee1cb7a..b4e95011a293602ab9a5be576df4b5318c15d32c 100644
--- a/src/index.ts
+++ b/src/index.ts
@@ -1,5 +1,5 @@
-import pino from "pino";
-import { Elysia } from "elysia";
+import pino from "pino"
+import { Elysia } from "elysia"
 
 import type {
   Logger,
@@ -17,7 +17,7 @@ import type {
   _INTERNAL_ElysiaLoggerPluginAutoLoggingState,
   _INTERNAL_ElysiaLoggerPluginAutoLoggingEnabledOptions,
   _INTERNAL_ElysiaLoggerPluginAutoLoggingDisabledOptions,
-} from "./types";
+} from "./types"
 
 /**
  * If you call one of the derived methods of this plugin (such as: ctx.log.info(object)) with a request or context object,
@@ -27,140 +27,135 @@ import type {
  *
  * I highly recommend to read the [Pino documentation](https://getpino.io/#/docs/api?id=options) yourself to learn about additional options.
  */
-import { formatters, serializers } from "./config";
+import { formatters, serializers } from "./config"
 
 /**
  * The StreamLogger is used to write log entries to a stream such as the console output (default behavior).
  */
 export function logger(
-  options?: _INTERNAL_ElysiaLoggerPluginAutoLoggingEnabledOptions<ElysiaStreamLoggerOptions>
-): _INTERNAL_ElysiaLoggerPlugin<_INTERNAL_ElysiaLoggerPluginAutoLoggingState>;
+  options?: _INTERNAL_ElysiaLoggerPluginAutoLoggingEnabledOptions<ElysiaStreamLoggerOptions>,
+): _INTERNAL_ElysiaLoggerPlugin<_INTERNAL_ElysiaLoggerPluginAutoLoggingState>
 export function logger(
-  options?: _INTERNAL_ElysiaLoggerPluginAutoLoggingDisabledOptions<ElysiaStreamLoggerOptions>
-): _INTERNAL_ElysiaLoggerPlugin;
+  options?: _INTERNAL_ElysiaLoggerPluginAutoLoggingDisabledOptions<ElysiaStreamLoggerOptions>,
+): _INTERNAL_ElysiaLoggerPlugin
 export function logger(options: ElysiaStreamLoggerOptions = {}) {
-  return plugin(options);
+  return plugin(options)
 }
 
 /**
  * A FileLogger lets you store log entries in a file.
  */
 export function fileLogger(
-  options: _INTERNAL_ElysiaLoggerPluginAutoLoggingEnabledOptions<ElysiaFileLoggerOptions>
-): _INTERNAL_ElysiaLoggerPlugin<_INTERNAL_ElysiaLoggerPluginAutoLoggingState>;
+  options: _INTERNAL_ElysiaLoggerPluginAutoLoggingEnabledOptions<ElysiaFileLoggerOptions>,
+): _INTERNAL_ElysiaLoggerPlugin<_INTERNAL_ElysiaLoggerPluginAutoLoggingState>
 export function fileLogger(
-  options: _INTERNAL_ElysiaLoggerPluginAutoLoggingDisabledOptions<ElysiaFileLoggerOptions>
-): _INTERNAL_ElysiaLoggerPlugin;
+  options: _INTERNAL_ElysiaLoggerPluginAutoLoggingDisabledOptions<ElysiaFileLoggerOptions>,
+): _INTERNAL_ElysiaLoggerPlugin
 export function fileLogger(options: ElysiaFileLoggerOptions) {
-  return plugin(options);
+  return plugin(options)
 }
 
 /**
  * Create a logger instance like the plugin.
  */
-export function createPinoLogger(options: StandaloneLoggerOptions = {}) {
-  type ElysiaLoggerInstance = ElysiaLogger<ReturnType<typeof into>>;
+export function createPinoLogger(options: StandaloneLoggerOptions = {}, pino?: Logger) {
+  type ElysiaLoggerInstance = ElysiaLogger<ReturnType<typeof into>>
 
-  const log = createPinoLoggerInternal(options);
+  const log = pino ?? createPinoLoggerInternal(options)
   // @ts-ignore
-  (log as unknown as ElysiaLoggerInstance).into = into.bind(log);
-  return log as unknown as ElysiaLoggerInstance;
+  ;(log as unknown as ElysiaLoggerInstance).into = into.bind(log)
+  return log as unknown as ElysiaLoggerInstance
 }
 
 function createPinoLoggerInternal(options: StandaloneLoggerOptions) {
-  options.level ??= "info";
-  options.formatters ??= formatters;
-  options.serializers ??= serializers;
+  options.level ??= "info"
+  options.formatters ??= formatters
+  options.serializers ??= serializers
 
-  const streamOptions = options as StreamLoggerOptions;
+  const streamOptions = options as StreamLoggerOptions
 
   if ("file" in options) {
-    streamOptions.stream = pino.destination(options.file);
-    delete (options as Partial<FileLoggerOptions>).file;
+    streamOptions.stream = pino.destination(options.file)
+    delete (options as Partial<FileLoggerOptions>).file
   }
 
-  return pino(options, streamOptions.stream!);
+  return pino(options, streamOptions.stream!)
 }
 
 function into(this: Logger, options: ElysiaLoggerOptions = {}) {
-  const autoLogging = options.autoLogging ?? true;
+  const autoLogging = options.autoLogging ?? true
 
-  delete options.autoLogging;
+  delete options.autoLogging
 
   const getLog = (ctx: ElysiaLoggerContext) => {
-    return typeof options.customProps === "function"
-      ? this.child(options.customProps(ctx))
-      : this;
-  };
+    return typeof options.customProps === "function" ? this.child(options.customProps(ctx)) : this
+  }
 
   let app = new Elysia({
     name: "@bogeychan/elysia-logger",
     seed: options,
   }).derive({ as: "global" }, (ctx) => {
-    const loggerCtx = ctx as unknown as ElysiaLoggerContext;
-    loggerCtx.isError = false;
-    return { log: getLog(loggerCtx) };
-  });
+    const loggerCtx = ctx as unknown as ElysiaLoggerContext
+    loggerCtx.isError = false
+    return { log: getLog(loggerCtx) }
+  })
 
   if (autoLogging) {
     return (
-      app as unknown as _INTERNAL_ElysiaLoggerPlugin<
-        _INTERNAL_Writeonly<_INTERNAL_ElysiaLoggerPluginAutoLoggingState>
-      >
+      app as unknown as _INTERNAL_ElysiaLoggerPlugin<_INTERNAL_Writeonly<_INTERNAL_ElysiaLoggerPluginAutoLoggingState>>
     )
       .onRequest((ctx) => {
-        ctx.store = { ...ctx.store, startTime: performance.now() };
+        ctx.store = { ...ctx.store, startTime: performance.now() }
       })
       .onAfterResponse({ as: "global" }, (ctx) => {
-        const loggerCtx = ctx as unknown as ElysiaLoggerContext;
-        loggerCtx.isError = false;
+        const loggerCtx = ctx as unknown as ElysiaLoggerContext
+        loggerCtx.isError = false
 
-        const log = getLog(loggerCtx);
+        const log = getLog(loggerCtx)
 
         if (log.level == "silent") {
-          return;
+          return
         }
 
         if (typeof autoLogging == "object" && autoLogging.ignore(loggerCtx)) {
-          return;
+          return
         }
 
-        ctx.store.startTime ??= 0;
-        ctx.store.endTime = performance.now();
-        ctx.store.responseTime = ctx.store.endTime - ctx.store.startTime;
+        ctx.store.startTime ??= 0
+        ctx.store.endTime = performance.now()
+        ctx.store.responseTime = ctx.store.endTime - ctx.store.startTime
 
-        log.info(ctx);
+        log.info(ctx)
       })
       .onError({ as: "global" }, (ctx) => {
-        const loggerCtx = ctx as ElysiaLoggerContext;
-        loggerCtx.isError = true;
+        const loggerCtx = ctx as ElysiaLoggerContext
+        loggerCtx.isError = true
 
-        const log = getLog(loggerCtx);
+        const log = getLog(loggerCtx)
 
         if (log.level == "silent") {
-          return;
+          return
         }
 
         if (typeof autoLogging == "object" && autoLogging.ignore(loggerCtx)) {
-          return;
+          return
         }
 
         if (ctx.code === "NOT_FOUND") {
-          log.info(ctx);
+          log.info(ctx)
         } else {
-          log.error(ctx);
+          log.error(ctx)
         }
-      });
+      })
   }
 
-  return app;
+  return app
 }
 
-const plugin = (options: LoggerOptions) =>
-  into.bind(createPinoLoggerInternal(options))(options);
+const plugin = (options: LoggerOptions) => into.bind(createPinoLoggerInternal(options))(options)
 
-export * from "./config";
+export * from "./config"
 
-export type { InferContext } from "./types";
+export type { InferContext } from "./types"
 
-export { pino } from "pino";
+export { pino } from "pino"
